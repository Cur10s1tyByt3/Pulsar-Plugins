name: Pulsar Plugin Release

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write

    env:
      BUILD_CONFIG: Release
      OUTPUT_DIR: ${{ github.workspace }}\build_plugins
      ZIP_NAME: plugins-${{ github.run_number }}.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Clone submodules
        run: |
          git config --file .gitmodules --name-only --get-regexp path | while read path_key; do
            path=$(git config --file .gitmodules --get "$path_key")
            url_key=$(echo "$path_key" | sed 's/\.path$/.url/')
            url=$(git config --file .gitmodules --get "$url_key")
            echo "Cloning $url into $path"
            git clone --recursive "$url" "$path"
          done
        shell: bash

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore Dependencies
        run: dotnet restore Pulsar-Plugins.sln

      - name: Build All Projects
        run: dotnet build Pulsar-Plugins.sln --configuration $env:BUILD_CONFIG --no-restore

      - name: Prepare Output Folder
        run: |
          if (Test-Path $env:OUTPUT_DIR) { Remove-Item $env:OUTPUT_DIR -Recurse -Force }
          New-Item -ItemType Directory -Path $env:OUTPUT_DIR | Out-Null
        shell: pwsh

      - name: Collect Plugin DLLs
        run: |
          $dlls = Get-ChildItem -Path . -Recurse -Filter "Pulsar.Plugin*.dll"
          Write-Host "Found $($dlls.Count) Pulsar.Plugin DLL files"
          
          $dlls | ForEach-Object {
            Write-Host "Copying $($_.Name)"
            Copy-Item $_.FullName -Destination $env:OUTPUT_DIR -Force
          }
          Write-Host ""
          Write-Host "Contents of output directory:"
          Get-ChildItem -Path $env:OUTPUT_DIR | Select-Object Name, Length
        shell: pwsh

      - name: Sign DLLs
        run: |
          Write-Host "Preparing signing environment..."

          $env:SIGNER_PATH = "$env:RUNNER_TEMP\signer.pfx"
          [IO.File]::WriteAllBytes($env:SIGNER_PATH, [Convert]::FromBase64String("${{ secrets.PLUGIN_SIGNING_PFX }}"))
          $password = "${{ secrets.PFX_PASSWORD }}"

          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe |
                      Sort-Object FullName -Descending |
                      Select-Object -First 1

          if (-not $signtool) {
            Write-Error "‚ùå signtool.exe not found on this GitHub runner."
            exit 1
          }

          Write-Host "‚úÖ Found signtool at: $($signtool.FullName)"

          # Sign all DLLs in the output folder
          $dlls = Get-ChildItem -Path $env:OUTPUT_DIR -Filter *.dll
          if ($dlls.Count -eq 0) {
            Write-Error "‚ùå No DLLs found in output directory ($env:OUTPUT_DIR) to sign."
            exit 1
          }

          foreach ($dll in $dlls) {
            Write-Host "üîè Signing $($dll.Name)..."
            $signArgs = @(
              "sign",
              "/f", $env:SIGNER_PATH,
              "/p", $password,
              "/fd", "sha256",
              "/tr", "http://timestamp.digicert.com",
              "/td", "sha256",
              $dll.FullName
            )

            & $signtool.FullName @signArgs
            if ($LASTEXITCODE -ne 0) {
              Write-Error "‚ùå Failed to sign $($dll.FullName)"
              exit 1
            }
          }

          Write-Host "‚úÖ All DLLs successfully signed!"
        shell: pwsh


      - name: Zip Plugins
        run: |
          Compress-Archive -Path "$env:OUTPUT_DIR\*" -DestinationPath "$env:ZIP_NAME"
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pulsar-plugins
          path: ${{ env.ZIP_NAME }}

      - name: Delete existing release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete Plugins-${{ github.run_number }} --yes --cleanup-tag || echo "No existing release/tag to delete"
        shell: bash

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create Plugins-${{ github.run_number }} ${{ env.ZIP_NAME }} \
            -t "Pulsar Plugins Build #${{ github.run_number }}" \
            -n "Automated build and signed plugin bundle."
        shell: bash